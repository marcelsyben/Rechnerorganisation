
Erweiterte_Stoppuhr.elf:     file format elf32-tradlittlemips

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007fc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000034  00004000  00004000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00004000 l    d  .data	00000000 .data
00004000 l       .data	00000000 ms
00004004 l       .data	00000000 Rx_Zeichen
00004008 l       .data	00000000 Tx_Schreibindex
0000400c l       .data	00000000 Tx_Leseindex
00004010 l       .data	00000000 Tx_Anzahl
00004014 l       .data	00000000 Tx_Fifo
00004024 l       .data	00000000 Bin_to_ASCII
00000000 l       .text	00000000 Reset_Vector
00000530 l       .text	00000000 main
00000008 l       .text	00000000 IP0_Vector
00000010 l       .text	00000000 IP2_Vector
000000e8 l       .text	00000000 Timer_Handler
00000018 l       .text	00000000 IP3_Vector
00000120 l       .text	00000000 Transmit_Handler
00000020 l       .text	00000000 IP4_Vector
00000234 l       .text	00000000 Receive_Handler
00000028 l       .text	00000000 bit_von
00000038 l       .text	00000000 lese_bit
00000064 l       .text	00000000 setze_bit
00000080 l       .text	00000000 loesche_bit
000000b0 l       .text	00000000 schreibe_bitfeld
000001d8 l       .text	00000000 Else
000001bc l       .text	00000000 EndifInner
00000204 l       .text	00000000 Endif
00000264 l       .text	00000000 Rx_Zeichen_holen
000002c8 l       .text	00000000 Tx_Fifo_schreiben
000002d0 l       .text	00000000 Tx_Fifo_s_while
00000360 l       .text	00000000 Tx_Fifo_s_Z
000003a0 l       .text	00000000 Zeit_anzeigen
000005e0 l       .text	00000000 WARTEN
0000068c l       .text	00000000 Uhr_starten
00000654 l       .text	00000000 Uhr_zuruecksetzen
000006b8 l       .text	00000000 ZAEHLEN
0000078c l       .text	00000000 Stop_pruefen
00000734 l       .text	00000000 Einer_pruefen
00000748 l       .text	00000000 Zehner_pruefen
0000075c l       .text	00000000 Minuten_pruefen
0000076c l       .text	00000000 Zeit_aktualisieren
000007d8 l       .text	00000000 Uhr_stoppen



Disassembly of section .text:

00000000 <Reset_Vector>:
# Einsprungpunkte
# ------------------------------------------------------------------------------
.section .text

Reset_Vector:
    beq $zero, $zero, main
   0:	1000014b 	b	530 <main>
   4:	00000000 	nop

00000008 <IP0_Vector>:

IP0_Vector:
	beq $zero, $zero, IP0_Vector
   8:	1000ffff 	b	8 <IP0_Vector>
   c:	00000000 	nop

00000010 <IP2_Vector>:

IP2_Vector:
    beq $zero, $zero, Timer_Handler
  10:	10000035 	b	e8 <Timer_Handler>
  14:	00000000 	nop

00000018 <IP3_Vector>:

IP3_Vector:
	beq $zero, $zero, Transmit_Handler
  18:	10000041 	b	120 <Transmit_Handler>
  1c:	00000000 	nop

00000020 <IP4_Vector>:

IP4_Vector:
	beq $zero, $zero, Receive_Handler
  20:	10000084 	b	234 <Receive_Handler>
  24:	00000000 	nop

00000028 <bit_von>:
#   $a1: Bitnummer
#   $v0: Rueckgabewert
# ------------------------------------------------------------------------------
# TODO: Unterprogramm aus Versuch 3 �bernehmen
bit_von:
	srlv  $t0, $a0, $a1
  28:	00a44006 	srlv	t0,a0,a1
    andi  $v0, $t0, 1
  2c:	31020001 	andi	v0,t0,0x1
    jr    $ra
  30:	03e00008 	jr	ra
  34:	00000000 	nop

00000038 <lese_bit>:
#   $a1: Bitnummer
#   $v0: Rueckgabewert
# ------------------------------------------------------------------------------
# TODO: Unterprogramm aus Versuch 3 �bernehmen
lese_bit:
    addiu $sp, $sp, -4                 # Ruecksprungadresse auf dem Stack sichern
  38:	27bdfffc 	addiu	sp,sp,-4
    sw    $ra, 0($sp)
  3c:	afbf0000 	sw	ra,0(sp)

    lw    $a0, 0($a0)
  40:	8c840000 	lw	a0,0(a0)
    la    $t0, bit_von
  44:	3c080000 	lui	t0,0x0
  48:	25080028 	addiu	t0,t0,40
    jalr  $ra, $t0
  4c:	0100f809 	jalr	t0
  50:	00000000 	nop

    lw    $ra, 0($sp)                  # Ruecksprungadresse vom Stack wiederherstellen
  54:	8fbf0000 	lw	ra,0(sp)
    addiu $sp, $sp, 4
  58:	27bd0004 	addiu	sp,sp,4
    jr    $ra 
  5c:	03e00008 	jr	ra
  60:	00000000 	nop

00000064 <setze_bit>:
#   $a0: Adresswert
#   $a1: Bitnummer
# ------------------------------------------------------------------------------
# TODO: Unterprogramm aus Versuch 3 �bernehmen
setze_bit:
    ori  $t0, $zero, 1
  64:	34080001 	li	t0,0x1
    sllv $t1, $t0, $a1
  68:	00a84804 	sllv	t1,t0,a1
    lw   $t2, 0($a0)
  6c:	8c8a0000 	lw	t2,0(a0)
    or   $t3, $t1, $t2
  70:	012a5825 	or	t3,t1,t2
    sw   $t3, 0($a0)
  74:	ac8b0000 	sw	t3,0(a0)
    jr   $ra
  78:	03e00008 	jr	ra
  7c:	00000000 	nop

00000080 <loesche_bit>:
#   $a0: Adresswert
#   $a1: Bitnummer
# ------------------------------------------------------------------------------
# TODO: Unterprogramm aus Versuch 3 �bernehmen
loesche_bit:
    ori   $t5, $zero, 0xffff
  80:	340dffff 	li	t5,0xffff
    ori   $t6, $zero, 16
  84:	340e0010 	li	t6,0x10
    sllv  $t7, $t5, $t6
  88:	01cd7804 	sllv	t7,t5,t6
    or    $t8, $t7, $t5
  8c:	01edc025 	or	t8,t7,t5

    ori   $t0, $zero, 1
  90:	34080001 	li	t0,0x1
    sllv  $t1, $t0, $a1
  94:	00a84804 	sllv	t1,t0,a1
    xor   $t4, $t1, $t8
  98:	01386026 	xor	t4,t1,t8
    lw    $t2, 0($a0)
  9c:	8c8a0000 	lw	t2,0(a0)
    and   $t3, $t4, $t2
  a0:	018a5824 	and	t3,t4,t2
    sw    $t3, 0($a0)
  a4:	ac8b0000 	sw	t3,0(a0)
    # addiu $k1, $t3, 0
    jr    $ra   
  a8:	03e00008 	jr	ra
  ac:	00000000 	nop

000000b0 <schreibe_bitfeld>:
#   $a2: Maske
#   $a3: Shift
# ------------------------------------------------------------------------------
# TODO: Unterprogramm aus Versuch 3 �bernehmen
schreibe_bitfeld:
    ori   $t7, $zero, 0xffff
  b0:	340fffff 	li	t7,0xffff
    ori   $t8, $zero, 16
  b4:	34180010 	li	t8,0x10
    sllv  $t9, $t7, $t8
  b8:	030fc804 	sllv	t9,t7,t8
    or    $t8, $t9, $t7
  bc:	032fc025 	or	t8,t9,t7


    lw    $t0, 0($a0)
  c0:	8c880000 	lw	t0,0(a0)
    sllv  $t1, $a2, $a3
  c4:	00e64804 	sllv	t1,a2,a3
    xor   $t2, $t1, $t8
  c8:	01385026 	xor	t2,t1,t8
    and   $t3, $t0, $t2
  cc:	010a5824 	and	t3,t0,t2

    and   $t4, $a1, $a2
  d0:	00a66024 	and	t4,a1,a2
    sllv  $t5, $t4, $a3
  d4:	00ec6804 	sllv	t5,t4,a3

    or    $t6, $t3, $t5
  d8:	016d7025 	or	t6,t3,t5
    sw    $t6, 0($a0)
  dc:	ac8e0000 	sw	t6,0(a0)
    jr    $ra                           # // Ruecksprung
  e0:	03e00008 	jr	ra
  e4:	00000000 	nop

000000e8 <Timer_Handler>:
# ------------------------------------------------------------------------------
# void Timer_Handler()
# ------------------------------------------------------------------------------
# TODO: Unterprogramm aus Versuch 4 �bernehmen
Timer_Handler:
    addiu $sp, $sp, -8                  # Register retten
  e8:	27bdfff8 	addiu	sp,sp,-8
    sw    $t0, 0($sp)
  ec:	afa80000 	sw	t0,0(sp)
    sw    $t1, 4($sp)
  f0:	afa90004 	sw	t1,4(sp)

    la    $t1, ms                       # Seit letztem Interrupt vergangene ms
  f4:	3c090000 	lui	t1,0x0
  f8:	25294000 	addiu	t1,t1,16384
    lw    $t0, 0($t1)                   # ms = ms + MS_PRO_INTERRUPT
  fc:	8d280000 	lw	t0,0(t1)
    addiu $t0, $t0, MS_PRO_INTERRUPT
 100:	25080001 	addiu	t0,t0,1
    sw    $t0, 0($t1)
 104:	ad280000 	sw	t0,0(t1)

    li    $t1, Timer_Basis              # Timer-Status abfragen, um Interrupt zu l�schen
 108:	34098000 	li	t1,0x8000
    lw    $zero, Timer_Status($t1)
 10c:	8d200010 	lw	zero,16(t1)

    lw    $t0, 0($sp)                   # Register wiederherstellen
 110:	8fa80000 	lw	t0,0(sp)
    lw    $t1, 4($sp)
 114:	8fa90004 	lw	t1,4(sp)
    addiu $sp, $sp, 8
 118:	27bd0008 	addiu	sp,sp,8
    eret
 11c:	42000018 	eret

00000120 <Transmit_Handler>:
# ------------------------------------------------------------------------------
# void Transmit_Handler()
# ------------------------------------------------------------------------------
# TODO: Unterprogramm aus Aufgabe 1 �bernehmen
Transmit_Handler:
    addiu $sp, $sp, -40
 120:	27bdffd8 	addiu	sp,sp,-40
    sw    $t0, 0($sp)
 124:	afa80000 	sw	t0,0(sp)
    sw    $t1, 4($sp)
 128:	afa90004 	sw	t1,4(sp)
    sw    $t2, 8($sp)
 12c:	afaa0008 	sw	t2,8(sp)
    sw    $t3, 12($sp)
 130:	afab000c 	sw	t3,12(sp)
    sw    $t4, 16($sp)
 134:	afac0010 	sw	t4,16(sp)
    sw    $t5, 20($sp)
 138:	afad0014 	sw	t5,20(sp)
    sw    $t6, 24($sp)
 13c:	afae0018 	sw	t6,24(sp)
    sw    $t7, 28($sp)
 140:	afaf001c 	sw	t7,28(sp)
    sw    $a0, 32($sp)
 144:	afa40020 	sw	a0,32(sp)
    sw    $a1, 36($sp)
 148:	afa50024 	sw	a1,36(sp)

    la    $t0, Tx_Anzahl                # if Tx_Anzahl <= 0  ==> Else
 14c:	3c080000 	lui	t0,0x0
 150:	25084010 	addiu	t0,t0,16400
    lw    $t1, 0($t0)
 154:	8d090000 	lw	t1,0(t0)
    blez  $t1, Else
 158:	1920001f 	blez	t1,1d8 <Else>
 15c:	00000000 	nop

    # *((int*)(UART_Basis + UART_TxData)) = Tx_Fifo[Tx_Leseindex];
    la    $t1, Tx_Fifo
 160:	3c090000 	lui	t1,0x0
 164:	25294014 	addiu	t1,t1,16404
    la    $t2, Tx_Leseindex
 168:	3c0a0000 	lui	t2,0x0
 16c:	254a400c 	addiu	t2,t2,16396
    lw    $t2, 0($t2)
 170:	8d4a0000 	lw	t2,0(t2)
    addu  $t1, $t1, $t2
 174:	012a4821 	addu	t1,t1,t2
    lb    $t2, 0($t1)
 178:	812a0000 	lb	t2,0(t1)
    # ori   $t2, $zero, 0x30        # Test mit 0
    li    $t0, UART_Basis
 17c:	34088300 	li	t0,0x8300
    sw    $t2, UART_TxData($t0)
 180:	ad0a0000 	sw	t2,0(t0)
    

    la    $t1, Tx_Leseindex             # Tx_Leseindex++
 184:	3c090000 	lui	t1,0x0
 188:	2529400c 	addiu	t1,t1,16396
    lw    $t0, 0($t1)
 18c:	8d280000 	lw	t0,0(t1)
    addiu $t0, $t0, 1
 190:	25080001 	addiu	t0,t0,1
    sw    $t0, 0($t1)
 194:	ad280000 	sw	t0,0(t1)

    la    $t0, Tx_Leseindex
 198:	3c080000 	lui	t0,0x0
 19c:	2508400c 	addiu	t0,t0,16396
    lw    $t1, 0($t0)
 1a0:	8d090000 	lw	t1,0(t0)
    ori   $t0, $zero, TX_FIFO_GROESSE
 1a4:	34080010 	li	t0,0x10
    bne   $t1, $t0, EndifInner          # if Tx_Leseindex /= TX_FIFO_GROESSE  ==> EndifInner
 1a8:	15280004 	bne	t1,t0,1bc <EndifInner>
 1ac:	00000000 	nop

    la    $t1, Tx_Leseindex
 1b0:	3c090000 	lui	t1,0x0
 1b4:	2529400c 	addiu	t1,t1,16396
    sw    $zero, 0($t1)                 # Tx_Leseindex = 0
 1b8:	ad200000 	sw	zero,0(t1)

000001bc <EndifInner>:

    EndifInner:
    la    $t1, Tx_Anzahl
 1bc:	3c090000 	lui	t1,0x0
 1c0:	25294010 	addiu	t1,t1,16400
    lw    $t0, 0($t1)
 1c4:	8d280000 	lw	t0,0(t1)
    addiu $t0, $t0, -1
 1c8:	2508ffff 	addiu	t0,t0,-1
    sw    $t0, 0($t1)                   # Tx_Anzahl--
 1cc:	ad280000 	sw	t0,0(t1)
    beq   $zero, $zero, Endif           # ==> Endif
 1d0:	1000000c 	b	204 <Endif>
 1d4:	00000000 	nop

000001d8 <Else>:

    Else:
    li    $t0, UART_Basis
 1d8:	34088300 	li	t0,0x8300
    addiu $a0, $t0, UART_Kontroll
 1dc:	25040008 	addiu	a0,t0,8

    li    $a1, UART_TxD_IrEn
 1e0:	24050000 	li	a1,0

    addiu $sp, $sp, -4
 1e4:	27bdfffc 	addiu	sp,sp,-4

    sw    $ra, 0($sp)
 1e8:	afbf0000 	sw	ra,0(sp)

    la    $t0, loesche_bit
 1ec:	3c080000 	lui	t0,0x0
 1f0:	25080080 	addiu	t0,t0,128
    jalr  $ra, $t0
 1f4:	0100f809 	jalr	t0
 1f8:	00000000 	nop

    lw    $ra, 0($sp)
 1fc:	8fbf0000 	lw	ra,0(sp)
    addiu $sp, $sp, 4
 200:	27bd0004 	addiu	sp,sp,4

00000204 <Endif>:

    Endif:
    lw    $t0, 0($sp)
 204:	8fa80000 	lw	t0,0(sp)
    lw    $t1, 4($sp)
 208:	8fa90004 	lw	t1,4(sp)
    lw    $t2, 8($sp)
 20c:	8faa0008 	lw	t2,8(sp)
    lw    $t3, 12($sp)
 210:	8fab000c 	lw	t3,12(sp)
    lw    $t4, 16($sp)
 214:	8fac0010 	lw	t4,16(sp)
    lw    $t5, 20($sp)
 218:	8fad0014 	lw	t5,20(sp)
    lw    $t6, 24($sp)
 21c:	8fae0018 	lw	t6,24(sp)
    lw    $t7, 28($sp)
 220:	8faf001c 	lw	t7,28(sp)
    lw    $a0, 32($sp)
 224:	8fa40020 	lw	a0,32(sp)
    lw    $a1, 36($sp)
 228:	8fa50024 	lw	a1,36(sp)
    addiu $sp, $sp, 40
 22c:	27bd0028 	addiu	sp,sp,40

    eret
 230:	42000018 	eret

00000234 <Receive_Handler>:
# ------------------------------------------------------------------------------
# void Receive_Handler()
# ------------------------------------------------------------------------------
# TODO: Unterprogramm aus Aufgabe 1 �bernehmen
Receive_Handler:
    addiu $sp, $sp, -8
 234:	27bdfff8 	addiu	sp,sp,-8
    sw    $t0, 0($sp)
 238:	afa80000 	sw	t0,0(sp)
    sw    $t1, 4($sp)
 23c:	afa90004 	sw	t1,4(sp)

    li    $t1, UART_Basis                     # Rx_Zeichen = *((char*)(UART_Basis + UART_RxData));
 240:	34098300 	li	t1,0x8300
    lw    $t0, UART_RxData($t1)
 244:	8d280004 	lw	t0,4(t1)
    la    $t1, Rx_Zeichen
 248:	3c090000 	lui	t1,0x0
 24c:	25294004 	addiu	t1,t1,16388
    sw    $t0, 0($t1)
 250:	ad280000 	sw	t0,0(t1)

    lw    $t0, 0($sp)
 254:	8fa80000 	lw	t0,0(sp)
    lw    $t1, 4($sp)
 258:	8fa90004 	lw	t1,4(sp)
    addiu $sp, $sp, 8
 25c:	27bd0008 	addiu	sp,sp,8
    eret
 260:	42000018 	eret

00000264 <Rx_Zeichen_holen>:
# ------------------------------------------------------------------------------
#   $v0: Rueckgabewert
# ------------------------------------------------------------------------------
# TODO: Unterprogramm aus Aufgabe 1 �bernehmen
Rx_Zeichen_holen:
    addiu $sp, $sp, -4
 264:	27bdfffc 	addiu	sp,sp,-4
    sw    $ra, 0($sp)
 268:	afbf0000 	sw	ra,0(sp)

    li    $a0, UART_Basis                     # loesche_bit(UART_Basis + UART_Kontroll, UART_RxD_IrEn);
 26c:	34048300 	li	a0,0x8300
    addiu $a0, $a0, UART_Kontroll
 270:	24840008 	addiu	a0,a0,8
    ori   $a1, $zero, UART_RxD_IrEn
 274:	34050001 	li	a1,0x1
    la    $t1, loesche_bit
 278:	3c090000 	lui	t1,0x0
 27c:	25290080 	addiu	t1,t1,128
    jalr  $ra, $t1
 280:	0120f809 	jalr	t1
 284:	00000000 	nop

    la    $t1, Rx_Zeichen                     # Zeichen = Rx_Zeichen
 288:	3c090000 	lui	t1,0x0
 28c:	25294004 	addiu	t1,t1,16388
    lw    $v0, 0($t1)
 290:	8d220000 	lw	v0,0(t1)
    addiu $t0, $zero, -1                      # Rx_Zeichen = -1;
 294:	2408ffff 	li	t0,-1
    sw    $t0, 0($t1)
 298:	ad280000 	sw	t0,0(t1)

    li    $a0, UART_Basis                     # setze_bit(UART_Basis + UART_Kontroll, UART_RxD_IrEn);
 29c:	34048300 	li	a0,0x8300
    addiu $a0, $a0, UART_Kontroll
 2a0:	24840008 	addiu	a0,a0,8
    ori   $a1, $zero, UART_RxD_IrEn
 2a4:	34050001 	li	a1,0x1
    la    $t1, setze_bit
 2a8:	3c090000 	lui	t1,0x0
 2ac:	25290064 	addiu	t1,t1,100
    jalr  $ra, $t1
 2b0:	0120f809 	jalr	t1
 2b4:	00000000 	nop

    lw    $ra, 0($sp)
 2b8:	8fbf0000 	lw	ra,0(sp)
    addiu $sp, $sp, 4
 2bc:	27bd0004 	addiu	sp,sp,4
    jr    $ra   
 2c0:	03e00008 	jr	ra
 2c4:	00000000 	nop

000002c8 <Tx_Fifo_schreiben>:
#   $a0: Wert
# ------------------------------------------------------------------------------
# TODO: Unterprogramm aus Aufgabe 1 �bernehmen
Tx_Fifo_schreiben:
Tx_Fifo_schreiben:
    addiu $sp, $sp, -4
 2c8:	27bdfffc 	addiu	sp,sp,-4
    sw    $ra, 0($sp)
 2cc:	afbf0000 	sw	ra,0(sp)

000002d0 <Tx_Fifo_s_while>:

Tx_Fifo_s_while:
    la    $t1, Tx_Anzahl                      # while (Tx_Anzahl == TX_FIFO_GROESSE) {
 2d0:	3c090000 	lui	t1,0x0
 2d4:	25294010 	addiu	t1,t1,16400
    lw    $t0, 0($t1)
 2d8:	8d280000 	lw	t0,0(t1)
    addiu $t0, $t0, -TX_FIFO_GROESSE
 2dc:	2508fff0 	addiu	t0,t0,-16
    beq   $t0, $zero, Tx_Fifo_s_while         # }
 2e0:	1100fffb 	beqz	t0,2d0 <Tx_Fifo_s_while>
 2e4:	00000000 	nop

    addiu $sp, $sp, -4                        # $a0 sichern
 2e8:	27bdfffc 	addiu	sp,sp,-4
    sw    $a0, 0($sp)
 2ec:	afa40000 	sw	a0,0(sp)

    li    $a0, UART_Basis                     # loesche_bit(UART_Basis + UART_Kontroll, UART_TxD_IrEn);
 2f0:	34048300 	li	a0,0x8300
    addiu $a0, $a0, UART_Kontroll
 2f4:	24840008 	addiu	a0,a0,8
    ori   $a1, $zero, UART_TxD_IrEn
 2f8:	34050000 	li	a1,0x0
    la    $t1, loesche_bit
 2fc:	3c090000 	lui	t1,0x0
 300:	25290080 	addiu	t1,t1,128
    jalr  $ra, $t1
 304:	0120f809 	jalr	t1
 308:	00000000 	nop

    lw    $a0, 0($sp)                         # $a0 wiederherstellen
 30c:	8fa40000 	lw	a0,0(sp)
    addiu $sp, $sp, 4
 310:	27bd0004 	addiu	sp,sp,4

    la     $t1, Tx_Schreibindex               # Tx_Fifo[Tx_Schreibindex] = Wert;
 314:	3c090000 	lui	t1,0x0
 318:	25294008 	addiu	t1,t1,16392
    lw     $t0, 0($t1)
 31c:	8d280000 	lw	t0,0(t1)
    la     $t1, Tx_Fifo
 320:	3c090000 	lui	t1,0x0
 324:	25294014 	addiu	t1,t1,16404
    addu   $t1, $t1, $t0
 328:	01284821 	addu	t1,t1,t0
    sb     $a0, 0($t1)
 32c:	a1240000 	sb	a0,0(t1)

    la     $t1, Tx_Schreibindex               # Tx_Schreibindex++;
 330:	3c090000 	lui	t1,0x0
 334:	25294008 	addiu	t1,t1,16392
    lw     $t0, 0($t1)
 338:	8d280000 	lw	t0,0(t1)
    addiu  $t0, $t0, 1
 33c:	25080001 	addiu	t0,t0,1
    sw     $t0, 0($t1)
 340:	ad280000 	sw	t0,0(t1)

    addiu  $t0, $t0, -TX_FIFO_GROESSE         # if(Tx_Schreibindex==TX_FIFO_GROESSE) {
 344:	2508fff0 	addiu	t0,t0,-16
    bne    $t0, $zero, Tx_Fifo_s_Z
 348:	15000005 	bnez	t0,360 <Tx_Fifo_s_Z>
 34c:	00000000 	nop
    ori    $t0, $zero, 0                      #     Tx_Schreibindex = 0;
 350:	34080000 	li	t0,0x0
    la     $t1, Tx_Schreibindex
 354:	3c090000 	lui	t1,0x0
 358:	25294008 	addiu	t1,t1,16392
    sw     $t0, 0($t1)                        # }
 35c:	ad280000 	sw	t0,0(t1)

00000360 <Tx_Fifo_s_Z>:

Tx_Fifo_s_Z:
    la     $t1, Tx_Anzahl                     # Tx_Anzahl++;
 360:	3c090000 	lui	t1,0x0
 364:	25294010 	addiu	t1,t1,16400
    lw     $t0, 0($t1)
 368:	8d280000 	lw	t0,0(t1)
    addiu  $t0, $t0, 1
 36c:	25080001 	addiu	t0,t0,1
    sw     $t0, 0($t1)
 370:	ad280000 	sw	t0,0(t1)

    li    $a0, UART_Basis                     # setze_bit(UART_Basis + UART_Kontroll, UART_TxD_IrEn);
 374:	34048300 	li	a0,0x8300
    addiu $a0, $a0, UART_Kontroll
 378:	24840008 	addiu	a0,a0,8
    ori   $a1, $zero, UART_TxD_IrEn
 37c:	34050000 	li	a1,0x0
    la    $t1, setze_bit
 380:	3c090000 	lui	t1,0x0
 384:	25290064 	addiu	t1,t1,100
    jalr  $ra, $t1
 388:	0120f809 	jalr	t1
 38c:	00000000 	nop

    lw    $ra, 0($sp)
 390:	8fbf0000 	lw	ra,0(sp)
    addiu $sp, $sp, 4
 394:	27bd0004 	addiu	sp,sp,4

    jr    $ra
 398:	03e00008 	jr	ra
 39c:	00000000 	nop

000003a0 <Zeit_anzeigen>:
#   $a2: Einer
#   $a3: Zehntel
# ------------------------------------------------------------------------------
# TODO: Unterprogramm aus Versuch 4 �bernehmen und um die UART-Ausgabe erg�nzen
Zeit_anzeigen:
    li    $t0, SSP_Basis
 3a0:	34088200 	li	t0,0x8200
    ori   $t1, $a0, 0x10
 3a4:	34890010 	ori	t1,a0,0x10
    sw    $t1, SSP_Wert3($t0)
 3a8:	ad09000c 	sw	t1,12(t0)
    sw    $a1, SSP_Wert2($t0)
 3ac:	ad050008 	sw	a1,8(t0)
    ori   $t1, $a2, 0x10
 3b0:	34c90010 	ori	t1,a2,0x10
    sw    $t1, SSP_Wert1($t0)
 3b4:	ad090004 	sw	t1,4(t0)
    sw    $a3, SSP_Wert0($t0)
 3b8:	ad070000 	sw	a3,0(t0)
    #sw 		$a1, 4($sp)
    #sw 		$a2, 8($sp)
    #sw 		$a3, 12($sp)
    #sw 		$ra, 16($sp)

	addiu $sp, $sp, -12        			# Stackpointer verschieben
 3bc:	27bdfff4 	addiu	sp,sp,-12
    sw 		$a0, 0($sp)
 3c0:	afa40000 	sw	a0,0(sp)
    sw 		$t0, 4($sp)
 3c4:	afa80004 	sw	t0,4(sp)
    sw 		$ra, 8($sp)
 3c8:	afbf0008 	sw	ra,8(sp)
#    lw 		$a0, 0($sp)					# Minuten
    addiu 	$a0, $a0, '0'
 3cc:	24840030 	addiu	a0,a0,48
    la 		$t0, Tx_Fifo_schreiben
 3d0:	3c080000 	lui	t0,0x0
 3d4:	250802c8 	addiu	t0,t0,712
    jalr 	$ra, $t0
 3d8:	0100f809 	jalr	t0
 3dc:	00000000 	nop
    lw 		$a0, 0($sp)
 3e0:	8fa40000 	lw	a0,0(sp)
    lw 		$t0, 4($sp)
 3e4:	8fa80004 	lw	t0,4(sp)
    lw 		$ra, 8($sp)
 3e8:	8fbf0008 	lw	ra,8(sp)
	addiu $sp, $sp, 12        			# Stackpointer wiederherstellen
 3ec:	27bd000c 	addiu	sp,sp,12

	addiu $sp, $sp, -12        			# Stackpointer verschieben
 3f0:	27bdfff4 	addiu	sp,sp,-12
    sw 		$a0, 0($sp)
 3f4:	afa40000 	sw	a0,0(sp)
    sw 		$t0, 4($sp)
 3f8:	afa80004 	sw	t0,4(sp)
    sw 		$ra, 8($sp)
 3fc:	afbf0008 	sw	ra,8(sp)
#    lw 		$a0, 0($sp)					
    addiu 	$a0, $zero, ':'
 400:	2404003a 	li	a0,58
    la 		$t0, Tx_Fifo_schreiben
 404:	3c080000 	lui	t0,0x0
 408:	250802c8 	addiu	t0,t0,712
    jalr 	$ra, $t0
 40c:	0100f809 	jalr	t0
 410:	00000000 	nop
    lw 		$a0, 0($sp)
 414:	8fa40000 	lw	a0,0(sp)
    lw 		$t0, 4($sp)
 418:	8fa80004 	lw	t0,4(sp)
    lw 		$ra, 8($sp)
 41c:	8fbf0008 	lw	ra,8(sp)
	addiu $sp, $sp, 12        			# Stackpointer wiederherstellen
 420:	27bd000c 	addiu	sp,sp,12


	addiu $sp, $sp, -12        			# Stackpointer verschieben
 424:	27bdfff4 	addiu	sp,sp,-12
    sw 		$a0, 0($sp)
 428:	afa40000 	sw	a0,0(sp)
    sw 		$t0, 4($sp)
 42c:	afa80004 	sw	t0,4(sp)
    sw 		$ra, 8($sp)
 430:	afbf0008 	sw	ra,8(sp)
 #   lw 		$a0, 0($sp)	
#    lw 		$a0, 0($sp)					# Zehner
    addiu 	$a0, $a1, '0'
 434:	24a40030 	addiu	a0,a1,48
    la 		$t0, Tx_Fifo_schreiben
 438:	3c080000 	lui	t0,0x0
 43c:	250802c8 	addiu	t0,t0,712
    jalr 	$ra, $t0
 440:	0100f809 	jalr	t0
 444:	00000000 	nop
    lw 		$a0, 0($sp)
 448:	8fa40000 	lw	a0,0(sp)
    lw 		$t0, 4($sp)
 44c:	8fa80004 	lw	t0,4(sp)
    lw 		$ra, 8($sp)
 450:	8fbf0008 	lw	ra,8(sp)
	addiu $sp, $sp, 12        			# Stackpointer wiederherstellen
 454:	27bd000c 	addiu	sp,sp,12


	addiu $sp, $sp, -12        			# Stackpointer verschieben
 458:	27bdfff4 	addiu	sp,sp,-12
    sw 		$a0, 0($sp)
 45c:	afa40000 	sw	a0,0(sp)
    sw 		$t0, 4($sp)
 460:	afa80004 	sw	t0,4(sp)
    sw 		$ra, 8($sp)
 464:	afbf0008 	sw	ra,8(sp)
#    lw 		$a0, 0($sp)	
#    lw 		$a0, 0($sp)					# Einer
    addiu 	$a0, $a2, '0'
 468:	24c40030 	addiu	a0,a2,48
    la 		$t0, Tx_Fifo_schreiben
 46c:	3c080000 	lui	t0,0x0
 470:	250802c8 	addiu	t0,t0,712
    jalr 	$ra, $t0
 474:	0100f809 	jalr	t0
 478:	00000000 	nop
    lw 		$a0, 0($sp)
 47c:	8fa40000 	lw	a0,0(sp)
    lw 		$t0, 4($sp)
 480:	8fa80004 	lw	t0,4(sp)
    lw 		$ra, 8($sp)
 484:	8fbf0008 	lw	ra,8(sp)
	addiu $sp, $sp, 12
 488:	27bd000c 	addiu	sp,sp,12

	addiu $sp, $sp, -12        			# Stackpointer verschieben
 48c:	27bdfff4 	addiu	sp,sp,-12
    sw 		$a0, 0($sp)
 490:	afa40000 	sw	a0,0(sp)
    sw 		$t0, 4($sp)
 494:	afa80004 	sw	t0,4(sp)
    sw 		$ra, 8($sp)
 498:	afbf0008 	sw	ra,8(sp)
#    lw 		$a0, 0($sp)					
    addiu 	$a0, $zero, ','
 49c:	2404002c 	li	a0,44
    la 		$t0, Tx_Fifo_schreiben
 4a0:	3c080000 	lui	t0,0x0
 4a4:	250802c8 	addiu	t0,t0,712
    jalr 	$ra, $t0
 4a8:	0100f809 	jalr	t0
 4ac:	00000000 	nop
    lw 		$a0, 0($sp)
 4b0:	8fa40000 	lw	a0,0(sp)
    lw 		$t0, 4($sp)
 4b4:	8fa80004 	lw	t0,4(sp)
    lw 		$ra, 8($sp)
 4b8:	8fbf0008 	lw	ra,8(sp)
	addiu $sp, $sp, 12
 4bc:	27bd000c 	addiu	sp,sp,12

	addiu $sp, $sp, -12        			# Stackpointer verschieben
 4c0:	27bdfff4 	addiu	sp,sp,-12
    sw 		$a0, 0($sp)
 4c4:	afa40000 	sw	a0,0(sp)
    sw 		$t0, 4($sp)
 4c8:	afa80004 	sw	t0,4(sp)
    sw 		$ra, 8($sp)
 4cc:	afbf0008 	sw	ra,8(sp)
#    lw 		$a0, 0($sp)	
#    lw 		$a0, 0($sp)					# Zehntel
    addiu 	$a0, $a3, '0'
 4d0:	24e40030 	addiu	a0,a3,48
    la 		$t0, Tx_Fifo_schreiben
 4d4:	3c080000 	lui	t0,0x0
 4d8:	250802c8 	addiu	t0,t0,712
    jalr 	$ra, $t0
 4dc:	0100f809 	jalr	t0
 4e0:	00000000 	nop
    lw 		$a0, 0($sp)
 4e4:	8fa40000 	lw	a0,0(sp)
    lw 		$t0, 4($sp)
 4e8:	8fa80004 	lw	t0,4(sp)
    lw 		$ra, 8($sp)
 4ec:	8fbf0008 	lw	ra,8(sp)
	addiu $sp, $sp, 12
 4f0:	27bd000c 	addiu	sp,sp,12

	addiu $sp, $sp, -12        			# Stackpointer verschieben
 4f4:	27bdfff4 	addiu	sp,sp,-12
    sw 		$a0, 0($sp)
 4f8:	afa40000 	sw	a0,0(sp)
    sw 		$t0, 4($sp)
 4fc:	afa80004 	sw	t0,4(sp)
    sw 		$ra, 8($sp)
 500:	afbf0008 	sw	ra,8(sp)
#    lw 		$a0, 0($sp)
    addiu 	$a0, $zero, '\n'
 504:	2404000a 	li	a0,10
    la 		$t0, Tx_Fifo_schreiben
 508:	3c080000 	lui	t0,0x0
 50c:	250802c8 	addiu	t0,t0,712
    jalr 	$ra, $t0
 510:	0100f809 	jalr	t0
 514:	00000000 	nop
    lw 		$a0, 0($sp)
 518:	8fa40000 	lw	a0,0(sp)
    lw 		$t0, 4($sp)
 51c:	8fa80004 	lw	t0,4(sp)
    lw 		$ra, 8($sp)
 520:	8fbf0008 	lw	ra,8(sp)
	addiu $sp, $sp, 12
 524:	27bd000c 	addiu	sp,sp,12

    jr    	$ra
 528:	03e00008 	jr	ra
 52c:	00000000 	nop

00000530 <main>:
.set Einer,       $s2
.set Zehntel,     $s3
.set Zeichen,     $s4

main:
    li    $sp, SP_INIT                    # Stackpointer initialisieren
 530:	341d8000 	li	sp,0x8000

    ori   Minuten, $zero, 0               # int Minuten = 0;
 534:	34100000 	li	s0,0x0
    ori   Zehner, $zero, 0                # int Zehner = 0;
 538:	34110000 	li	s1,0x0
    ori   Einer, $zero, 0                 # int Einer = 0;
 53c:	34120000 	li	s2,0x0
    ori   Zehntel, $zero, 0               # int Zehntel = 0;
 540:	34130000 	li	s3,0x0

    ori   $t0, $zero, 0                   # ms = 0;
 544:	34080000 	li	t0,0x0
    la    $t1, ms
 548:	3c090000 	lui	t1,0x0
 54c:	25294000 	addiu	t1,t1,16384
    sw    $t0, 0($t1)
 550:	ad280000 	sw	t0,0(t1)

    addiu $t0, $zero, -1                  # Rx_Zeichen = -1;
 554:	2408ffff 	li	t0,-1
    la    $t1, Rx_Zeichen
 558:	3c090000 	lui	t1,0x0
 55c:	25294004 	addiu	t1,t1,16388
    sw    $t0, 0($t1)
 560:	ad280000 	sw	t0,0(t1)

    li    $a0, UART_Basis                 # setze_bit(UART_Basis + UART_Kontroll, UART_TxD_IrEn);
 564:	34048300 	li	a0,0x8300
    addiu $a0, $a0, UART_Kontroll
 568:	24840008 	addiu	a0,a0,8
    ori   $a1, $zero, UART_TxD_IrEn
 56c:	34050000 	li	a1,0x0
    la    $t1, setze_bit
 570:	3c090000 	lui	t1,0x0
 574:	25290064 	addiu	t1,t1,100
    jalr  $ra, $t1
 578:	0120f809 	jalr	t1
 57c:	00000000 	nop

    li    $a0, Timer_Basis                # schreibe_bitfeld(Timer_Basis + Timer_Periode, TAKTZYKLEN_PRO_MS, 0xffffffff, 0);
 580:	34048000 	li	a0,0x8000
    addiu $a0, $a0, Timer_Periode
 584:	24840000 	addiu	a0,a0,0
    li    $a1, ZAEHLER_PERIODE
 588:	3405ea5f 	li	a1,0xea5f
    li    $a2, 0xffffffff
 58c:	2406ffff 	li	a2,-1
    ori   $a3, $zero, 0
 590:	34070000 	li	a3,0x0
    la    $t1, schreibe_bitfeld
 594:	3c090000 	lui	t1,0x0
 598:	252900b0 	addiu	t1,t1,176
    jalr  $ra, $t1
 59c:	0120f809 	jalr	t1
 5a0:	00000000 	nop

    ori   $t0, $zero, IM2                 # Interrupt 2, 3, 4 freigeben
 5a4:	34080400 	li	t0,0x400
    ori   $t0, $t0,   IM3
 5a8:	35080800 	ori	t0,t0,0x800
    ori   $t0, $t0,   IM4
 5ac:	35081000 	ori	t0,t0,0x1000
    mfc0  $t1, Status
 5b0:	40096000 	mfc0	t1,c0_status
    or    $t0, $t0, $t1
 5b4:	01094025 	or	t0,t0,t1
    mtc0  $t0, Status
 5b8:	40886000 	mtc0	t0,c0_status

    ei    $zero                           # Globalen Interrupt freigeben
 5bc:	41606020 	ei

    ori   $a0, Minuten, 0                 # Zeit_anzeigen(Minuten, Zehner, Einer, Zehntel);
 5c0:	36040000 	ori	a0,s0,0x0
    ori   $a1, Zehner, 0
 5c4:	36250000 	ori	a1,s1,0x0
    ori   $a2, Einer, 0
 5c8:	36460000 	ori	a2,s2,0x0
    ori   $a3, Zehntel, 0
 5cc:	36670000 	ori	a3,s3,0x0
    la    $t1, Zeit_anzeigen
 5d0:	3c090000 	lui	t1,0x0
 5d4:	252903a0 	addiu	t1,t1,928
    jalr  $ra, $t1
 5d8:	0120f809 	jalr	t1
 5dc:	00000000 	nop

000005e0 <WARTEN>:

WARTEN:                                   #     while(1) {
    la    $t1, Rx_Zeichen_holen           #         int Zeichen = Rx_Zeichen_holen();
 5e0:	3c090000 	lui	t1,0x0
 5e4:	25290264 	addiu	t1,t1,612
    jalr  $ra, $t1
 5e8:	0120f809 	jalr	t1
 5ec:	00000000 	nop
    ori   Zeichen, $v0, 0
 5f0:	34540000 	ori	s4,v0,0x0

    xori  $t0, Zeichen, 's'               #         if('s'== Zeichen || (lese_bit(GPIO_Basis + GPIO_Eingabe) & START)) {
 5f4:	3a880073 	xori	t0,s4,0x73
    beq   $t0, $zero, Uhr_starten
 5f8:	11000024 	beqz	t0,68c <Uhr_starten>
 5fc:	00000000 	nop

    li    $a0, GPIO_Basis
 600:	34048100 	li	a0,0x8100
    addiu $a0, $a0, GPIO_Eingabe
 604:	24840000 	addiu	a0,a0,0
    ori   $a1, $zero, START
 608:	34050000 	li	a1,0x0
    la    $t1, lese_bit
 60c:	3c090000 	lui	t1,0x0
 610:	25290038 	addiu	t1,t1,56
    jalr  $ra, $t1
 614:	0120f809 	jalr	t1
 618:	00000000 	nop
    bne   $v0, $zero, Uhr_starten         #             break;
 61c:	1440001b 	bnez	v0,68c <Uhr_starten>
 620:	00000000 	nop
                                          #         }

    xori  $t0, Zeichen, 'r'               #         if('r'==Zeichen || lese_bit(GPIO_Basis + GPIO_Eingabe, RUECKSETZEN)) {
 624:	3a880072 	xori	t0,s4,0x72
    beq   $t0, $zero, Uhr_zuruecksetzen
 628:	1100000a 	beqz	t0,654 <Uhr_zuruecksetzen>
 62c:	00000000 	nop

    li    $a0, GPIO_Basis
 630:	34048100 	li	a0,0x8100
    addiu $a0, $a0, GPIO_Eingabe
 634:	24840000 	addiu	a0,a0,0
    ori   $a1, $zero, RESET
 638:	34050002 	li	a1,0x2
    la    $t1, lese_bit
 63c:	3c090000 	lui	t1,0x0
 640:	25290038 	addiu	t1,t1,56
    jalr  $ra, $t1
 644:	0120f809 	jalr	t1
 648:	00000000 	nop
    beq   $v0, $zero, WARTEN
 64c:	1040ffe4 	beqz	v0,5e0 <WARTEN>
 650:	00000000 	nop

00000654 <Uhr_zuruecksetzen>:

Uhr_zuruecksetzen:
    ori   Minuten, $zero, 0               #             Minuten = 0;
 654:	34100000 	li	s0,0x0
    ori   Zehner, $zero, 0                #             Zehner  = 0;
 658:	34110000 	li	s1,0x0
    ori   Einer, $zero, 0                 #             Einer   = 0;
 65c:	34120000 	li	s2,0x0
    ori   Zehntel, $zero, 0               #             Zehntel = 0;
 660:	34130000 	li	s3,0x0

    ori   $a0, Minuten, 0                 #             Zeit_anzeigen(Minuten, Zehner, Einer, Zehntel);
 664:	36040000 	ori	a0,s0,0x0
    ori   $a1, Zehner, 0
 668:	36250000 	ori	a1,s1,0x0
    ori   $a2, Einer, 0
 66c:	36460000 	ori	a2,s2,0x0
    ori   $a3, Zehntel, 0
 670:	36670000 	ori	a3,s3,0x0
    la    $t1, Zeit_anzeigen
 674:	3c090000 	lui	t1,0x0
 678:	252903a0 	addiu	t1,t1,928
    jalr  $ra, $t1
 67c:	0120f809 	jalr	t1
 680:	00000000 	nop
                                          #         }
    beq   $zero, $zero, WARTEN            #     }
 684:	1000ffd6 	b	5e0 <WARTEN>
 688:	00000000 	nop

0000068c <Uhr_starten>:

Uhr_starten:
    ori   $t0, $zero, 0                   #     ms = 0
 68c:	34080000 	li	t0,0x0
    la    $t1, ms
 690:	3c090000 	lui	t1,0x0
 694:	25294000 	addiu	t1,t1,16384
    sw    $t0, 0($t1)
 698:	ad280000 	sw	t0,0(t1)

    li    $a0, Timer_Basis                #     // Timer-Interrupt aktivieren
 69c:	34048000 	li	a0,0x8000
    addiu $a0, $a0, Timer_Kontroll        #     setze_bit(Timer_Basis + Timer_Kontroll, Timer_IrEn)
 6a0:	2484000c 	addiu	a0,a0,12
    ori   $a1, $zero, Timer_IrEn
 6a4:	34050000 	li	a1,0x0
    la    $t1, setze_bit
 6a8:	3c090000 	lui	t1,0x0
 6ac:	25290064 	addiu	t1,t1,100
    jalr  $ra, $t1
 6b0:	0120f809 	jalr	t1
 6b4:	00000000 	nop

000006b8 <ZAEHLEN>:

ZAEHLEN:                                  # while(1) {
    la    $t1, ms                         #     if(ms >= 100) {
 6b8:	3c090000 	lui	t1,0x0
 6bc:	25294000 	addiu	t1,t1,16384
    lw    $t0, 0($t1)
 6c0:	8d280000 	lw	t0,0(t1)
    addiu $t0, $t0, -100
 6c4:	2508ff9c 	addiu	t0,t0,-100
    bltz  $t0, Stop_pruefen
 6c8:	05000030 	bltz	t0,78c <Stop_pruefen>
 6cc:	00000000 	nop

    li    $a0, Timer_Basis                #         // Timer-Interrupt sperren
 6d0:	34048000 	li	a0,0x8000
    addiu $a0, $a0, Timer_Kontroll        #         loesche_bit(Timer_Basis + Timer_Kontroll, Timer_IrEn)
 6d4:	2484000c 	addiu	a0,a0,12
    ori   $a1, $zero, Timer_IrEn
 6d8:	34050000 	li	a1,0x0
    la    $t1, loesche_bit
 6dc:	3c090000 	lui	t1,0x0
 6e0:	25290080 	addiu	t1,t1,128
    jalr  $ra, $t1
 6e4:	0120f809 	jalr	t1
 6e8:	00000000 	nop

    la    $t1, ms                         #         ms = ms - 100
 6ec:	3c090000 	lui	t1,0x0
 6f0:	25294000 	addiu	t1,t1,16384
    lw    $t0, 0($t1)
 6f4:	8d280000 	lw	t0,0(t1)
    addiu $t0, $t0, -100
 6f8:	2508ff9c 	addiu	t0,t0,-100
    sw    $t0, 0($t1)
 6fc:	ad280000 	sw	t0,0(t1)

    li    $a0, Timer_Basis                #         // Timer-Interrupt freigeben
 700:	34048000 	li	a0,0x8000
    addiu $a0, $a0, Timer_Kontroll        #         setze_bit(Timer_Basis + Timer_Kontroll, Timer_IrEn)
 704:	2484000c 	addiu	a0,a0,12
    ori   $a1, $zero, Timer_IrEn
 708:	34050000 	li	a1,0x0
    la    $t1, setze_bit
 70c:	3c090000 	lui	t1,0x0
 710:	25290064 	addiu	t1,t1,100
    jalr  $ra, $t1
 714:	0120f809 	jalr	t1
 718:	00000000 	nop

    addiu Zehntel, Zehntel, 1             #         Zehntel++;
 71c:	26730001 	addiu	s3,s3,1

    addiu $t0, Zehntel, -10               #         if(Zehntel == 10) {
 720:	2668fff6 	addiu	t0,s3,-10
    bne   $t0, $zero, Einer_pruefen
 724:	15000003 	bnez	t0,734 <Einer_pruefen>
 728:	00000000 	nop
    addiu Einer, Einer, 1                 #             Einer++;
 72c:	26520001 	addiu	s2,s2,1
    ori   Zehntel, $zero, 0               #             Zehntel = 0;
 730:	34130000 	li	s3,0x0

00000734 <Einer_pruefen>:
                                          #         }
Einer_pruefen:
    addiu $t0, Einer, -10                 #         if(Einer == 10) {
 734:	2648fff6 	addiu	t0,s2,-10
    bne   $t0, $zero, Zehner_pruefen
 738:	15000003 	bnez	t0,748 <Zehner_pruefen>
 73c:	00000000 	nop
    addiu Zehner, Zehner, 1               #             Zehner++;
 740:	26310001 	addiu	s1,s1,1
    ori   Einer, $zero, 0                 #             Einer = 0;
 744:	34120000 	li	s2,0x0

00000748 <Zehner_pruefen>:
                                          #         }
Zehner_pruefen:
    addiu $t0, Zehner, -6                 #         if(Zehner == 6) {
 748:	2628fffa 	addiu	t0,s1,-6
    bne   $t0, $zero, Minuten_pruefen
 74c:	15000003 	bnez	t0,75c <Minuten_pruefen>
 750:	00000000 	nop
    addiu Minuten, Minuten, 1             #             Minuten++;
 754:	26100001 	addiu	s0,s0,1
    ori   Zehner, $zero, 0                #            Zehner = 0;
 758:	34110000 	li	s1,0x0

0000075c <Minuten_pruefen>:
                                          #         }
Minuten_pruefen:
    addiu $t0, Minuten, -10               #         if(Minuten == 10) {
 75c:	2608fff6 	addiu	t0,s0,-10
    bne   $t0, $zero, Zeit_aktualisieren
 760:	15000002 	bnez	t0,76c <Zeit_aktualisieren>
 764:	00000000 	nop
    ori   Minuten, $zero, 0               #            Minuten = 0;
 768:	34100000 	li	s0,0x0

0000076c <Zeit_aktualisieren>:
                                          #         }
Zeit_aktualisieren:
    ori   $a0, Minuten, 0                 #         Zeit_anzeigen(Minuten, Zehner, Einer, Zehntel);
 76c:	36040000 	ori	a0,s0,0x0
    ori   $a1, Zehner, 0
 770:	36250000 	ori	a1,s1,0x0
    ori   $a2, Einer, 0
 774:	36460000 	ori	a2,s2,0x0
    ori   $a3, Zehntel, 0
 778:	36670000 	ori	a3,s3,0x0
    la    $t1, Zeit_anzeigen
 77c:	3c090000 	lui	t1,0x0
 780:	252903a0 	addiu	t1,t1,928
    jalr  $ra, $t1                        #         }
 784:	0120f809 	jalr	t1
 788:	00000000 	nop

0000078c <Stop_pruefen>:

Stop_pruefen:
    la    $t1, Rx_Zeichen_holen           #         Zeichen = Rx_Zeichen_holen();
 78c:	3c090000 	lui	t1,0x0
 790:	25290264 	addiu	t1,t1,612
    jalr  $ra, $t1
 794:	0120f809 	jalr	t1
 798:	00000000 	nop
    ori   Zeichen, $v0, 0
 79c:	34540000 	ori	s4,v0,0x0

    xori  $t0, Zeichen, 'x'               #         if('x'== Zeichen || (lese_bit(GPIO_Basis + GPIO_Eingabe) & STOP)) {
 7a0:	3a880078 	xori	t0,s4,0x78
    beq   $t0, $zero, Uhr_stoppen
 7a4:	1100000c 	beqz	t0,7d8 <Uhr_stoppen>
 7a8:	00000000 	nop

    li    $a0, GPIO_Basis
 7ac:	34048100 	li	a0,0x8100
    addiu $a0, $a0, GPIO_Eingabe
 7b0:	24840000 	addiu	a0,a0,0
    ori   $a1, $zero, STOP
 7b4:	34050001 	li	a1,0x1
    la    $t1, lese_bit
 7b8:	3c090000 	lui	t1,0x0
 7bc:	25290038 	addiu	t1,t1,56
    jalr  $ra, $t1
 7c0:	0120f809 	jalr	t1
 7c4:	00000000 	nop
    bne   $v0, $zero, Uhr_stoppen         #             break;
 7c8:	14400003 	bnez	v0,7d8 <Uhr_stoppen>
 7cc:	00000000 	nop
                                          #         }
    beq   $zero, $zero, ZAEHLEN           #     }
 7d0:	1000ffb9 	b	6b8 <ZAEHLEN>
 7d4:	00000000 	nop

000007d8 <Uhr_stoppen>:

Uhr_stoppen:
    li    $a0, Timer_Basis                #     loesche_bit(Timer_Basis + Timer_Kontroll, Timer_IrEn)
 7d8:	34048000 	li	a0,0x8000
    addiu $a0, $a0, Timer_Kontroll
 7dc:	2484000c 	addiu	a0,a0,12
    ori   $a1, $zero, Timer_IrEn
 7e0:	34050000 	li	a1,0x0
    la    $t1, loesche_bit
 7e4:	3c090000 	lui	t1,0x0
 7e8:	25290080 	addiu	t1,t1,128
    jalr  $ra, $t1
 7ec:	0120f809 	jalr	t1
 7f0:	00000000 	nop

    beq   $zero, $zero, WARTEN            # }
 7f4:	1000ff7a 	b	5e0 <WARTEN>
 7f8:	00000000 	nop

Disassembly of section .data:

00004000 <ms>:
    4000:	00000000 	nop

00004004 <Rx_Zeichen>:
    4004:	00000000 	nop

00004008 <Tx_Schreibindex>:
    4008:	00000000 	nop

0000400c <Tx_Leseindex>:
    400c:	00000000 	nop

00004010 <Tx_Anzahl>:
    4010:	00000000 	nop

00004014 <Tx_Fifo>:
	...

00004024 <Bin_to_ASCII>:
    4024:	33323130 	andi	s2,t9,0x3130
    4028:	37363534 	ori	s6,t9,0x3534
    402c:	42413938 	c0	0x413938
    4030:	46454443 	c1	0x454443
